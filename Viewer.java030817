import java.awt.Desktop;
import java.awt.EventQueue;
import java.io.File;
import java.io.IOException;
import javafx.scene.canvas.Canvas;
import javafx.scene.canvas.GraphicsContext;
import java.lang.Process;
import java.lang.ProcessBuilder;
import java.util.logging.Level;
import java.util.logging.Logger;
import javafx.application.Application;
import javafx.event.ActionEvent;
import javafx.scene.Scene;
import javafx.scene.control.Menu;
import javafx.scene.control.MenuBar;
import javafx.scene.control.MenuItem;
import javafx.scene.layout.VBox;
import javafx.scene.layout.HBox;
import javafx.scene.layout.BorderPane;
import javafx.scene.control.ScrollPane;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.stage.Stage;
import javafx.stage.FileChooser;
import javafx.scene.paint.Color;
import javafx.scene.text.Font;
import javafx.scene.input.MouseEvent;

public class Viewer extends Application  {
  private final Desktop desktop = Desktop.getDesktop(); 
  private readSeq ifseq;
  private importCluster clinf;
  private Canvas canvasL;
  private Canvas canvasR;
  private GraphicsContext gcL;
  private GraphicsContext gcR;
  private BorderPane left = new BorderPane();
  private BorderPane right = new BorderPane();
  private char c1[], c2[];
  private ClusterSeq cls;

  @Override
  public void start(Stage stage) throws Exception {
      stage.setTitle("Viewer");
      stage.setWidth(1120);
      stage.setHeight(880);

      left.setOnMouseClicked(event -> rePaint(event));

      final FileChooser fileChooser = new FileChooser();
      VBox root = new VBox();
      
      MenuBar menuBar = new MenuBar();
      Menu fileMenu = new Menu("File");

      MenuItem mnuImSequFS = new MenuItem("Import Seq File (unaligned FASTA)");
      MenuItem mnuImSeqaFS = new MenuItem("Import Seq File (aligned FASTA)");
      MenuItem mnuImSeqCl = new MenuItem("Import Seq File (Clustal)");
      MenuItem mnuImTree = new MenuItem("Import Tree File");
      MenuItem mnuImClus = new MenuItem("Import Cluster File");
      MenuItem mnuExit = new MenuItem("Exit");

      mnuImClus.setOnAction(event -> {
	      File file = fileChooser.showOpenDialog(stage);
	      if (file != null)  {
		  String filename = file.getName();
		  clinf = new importCluster(filename);
		  c1 = new char[clinf.getClusterSize()];
		  c2 = new char[clinf.getClusterSize()];
		  for (int i = 0 ; i < clinf.getClusterSize() ; ++i)  {
		      c1[i] = ' ';
		      c2[i] = ' ';
		  }
		  
                  canvasL = new Canvas((2*25 + 300), clinf.getClusterSize()*25+100);
	          gcL = canvasL.getGraphicsContext2D();
	          for (int i = 0 ; i < clinf.getClusterSize() ; ++i)  {
		      gcL.setLineWidth(2.0);
		      gcL.setStroke(Color.BLUE);
		      gcL.strokeRect(10,34+i*25,20,20);

		      gcL.setStroke(Color.ORANGE);
		      gcL.strokeRect(35,34+i*25,20,20);

		      gcL.setFont(new Font(20));
		      gcL.fillText(clinf.getClusterName(i), 65, 50 + i*25);
		  }
		  gcL.setLineWidth(1.0);
		  gcL.setStroke(Color.BLACK);
		  gcL.strokeRect(10, 38+clinf.getClusterSize()*25,82,20);
                  gcL.setFont(new Font(18));
		  gcL.fillText("clear all",12,54+clinf.getClusterSize()*25);
		  gcL.setLineWidth(1.0);
		  gcL.setStroke(Color.BLACK);
		  gcL.strokeRect(10, 63+clinf.getClusterSize()*25,82,20);
                  gcL.setFont(new Font(18));
		  gcL.fillText("select all",12,79+clinf.getClusterSize()*25);
	      }
	      left.setLeft(canvasL);
	      if (ifseq != null)  {
		  cls = new ClusterSeq(ifseq, clinf, 0);
		  
		  canvasR = new Canvas((ifseq.getSeqLen(0)*25+50), (ifseq.getSeqSize()*25+50));
		  gcR = canvasR.getGraphicsContext2D();
		  for (int i = 0 ; i < clinf.getClusterSize() ; ++i)  {
		      for (int j = 0 ; j < ifseq.getSeqLen(0) ; ++j)  {
			  double Rc = cls.getFreq()[i][cls.getmxIdx()[i][j]][j];
			  double Bc = 1.0 - cls.getFreq()[i][cls.getmxIdx()[i][j]][j];
			  Color col;
			  if (cls.getmxIdx()[i][j]==20)  col = new Color(0.0,0.0,0.0,1.0);
			  else col = new Color(Rc, 0.0, Bc, 1.0);
			  gcR.setFill(col);
			  gcR.setFont(new Font(20));
			  gcR.fillText(cls.getcSeq().get(i).substring(j, j+1), 10+j*25, 50+i*25);
		      }
		  }
		  right.setLeft(canvasR);
	      }
	  });
      mnuImSeqCl.setOnAction(event -> {
	      File file = fileChooser.showOpenDialog(stage);
	      if (file != null)  {
		  String filename = file.getName();
		  ifseq = new readSeq(filename, 0);
		  /*
		  for (int j = 0 ; j < ifseq.size() ; ++j)  {
		      System.out.println(ifseq.getName(j));
		      System.out.println(ifseq.getSeq(j));
		  }
		  */ 
	      }
	      /*
	      canvasR = new Canvas((ifseq.getSeqLen(0)*25+50), (ifseq.getSeqSize()*25+50));
	      gcR = canvasR.getGraphicsContext2D();

	      for (int j = 0 ; j < ifseq.getSeqSize() ; ++j)  {
		  for (int k = 0 ; k < ifseq.getSeqLen(0) ; ++k)  {
		      gcR.setFont(new Font(20));
		      gcR.fillText(ifseq.getSeq(j).substring(k, k+1), 10+k*25, 50+j*25);
		  }
	      }
	      right.setLeft(canvasR);
	      */
	  });
      mnuImSeqaFS.setOnAction(event -> {
	      File file = fileChooser.showOpenDialog(stage);
	      if (file != null)  {
		  String filename = file.getName();
		  ifseq = new readSeq(filename, 1);
		  
		  for (int j = 0 ; j < ifseq.size() ; ++j)  {
		      System.out.println(ifseq.getName(j));
		      System.out.println(ifseq.getSeq(j));
		  }
		  
	      } 
	  });

      mnuImSequFS.setOnAction(event -> {
	      File file = fileChooser.showOpenDialog(stage);
	      if (file != null)  {
                  ProcessBuilder pb = new ProcessBuilder("mafft","--auto", file.getName());
	          File alnfasta = new File("dummy.txt");
	          // 標準エラーを標準出力にマージ
	          pb.redirectErrorStream(true);
	          // 出力のリダイレクト先にファイルを指定
	          pb.redirectOutput(alnfasta);
	          try {
		      Process p = pb.start();
		      // 処理の終了を待つ
		      p.waitFor();		  
                      // 実行結果を取得するストリームの種別を出力
	              //System.out.println(pb.redirectInput());     
		      ifseq = new readSeq("dummy.txt", 1);
		      /*  */
		      for (int j = 0 ; j < ifseq.size() ; ++j)  {
		          System.out.println(ifseq.getName(j));
		          System.out.println(ifseq.getSeq(j));
		      } 
		      /*  */ 
                  }
	          catch (IOException | InterruptedException e) {
		      e.printStackTrace();
	          }
	      }
	  });

      mnuExit.setOnAction(event -> System.exit(0));

      fileMenu.getItems().addAll(mnuImSequFS, mnuImSeqaFS, mnuImSeqCl, mnuImTree, mnuImClus, mnuExit);
      menuBar.getMenus().addAll(fileMenu);
      
      root.getChildren().addAll(menuBar);

      HBox hbx = new HBox();
      left.setPrefSize(380, 600);
      right.setPrefSize(740, 600);

      ScrollPane sp1 = new ScrollPane(left);
      ScrollPane sp2 = new ScrollPane(right);
      sp1.setPrefSize(380, 600);
      sp2.setPrefSize(740, 600);

      /*
      Image ex1 = new Image(getClass().getResourceAsStream("test.jpg"));

      StackPane pn1 = new StackPane();
      pn1.setPrefSize(1000, 1000);
      StackPane pn2 = new StackPane();
      pn2.setPrefSize(1000, 1000);

      pn1.getChildren().addAll(new ImageView(ex1));
      pn2.getChildren().addAll(new ImageView(ex1));
      sp1.setContent(pn1);
      sp2.setContent(pn2);
      */

      hbx.getChildren().addAll(sp1, sp2);

      VBox vbx = new VBox();

      ScrollPane sp3 = new ScrollPane();
      sp3.setPrefSize(1120, 280);
      vbx.getChildren().addAll(hbx, sp3);
     
      root.getChildren().addAll(vbx);
     
      stage.setScene(new Scene(root));
      stage.show();
  }

  private void openFile(File file)  {
      EventQueue.invokeLater(() -> { 
	      try {
		  desktop.open(file);
              }
	      catch (IOException ex)  {
		  Logger.getLogger(Viewer.class.getName()).log(Level.SEVERE, null, ex);
	      }
	  });
  }

    private void rePaint(MouseEvent event)  {
	double x, y, x2, y2;

	x = event.getX();
	y = event.getY();

        for (int i = 0 ; i < clinf.getClusterSize() ; ++i)  {
	    if (x >= 10 && x <= 30 && y >= 34+i*25 && y <= 54+i*25) {
		if (c1[i] == ' ' && c2[i] == ' ')  {
		    c1[i] = 'X';
		    gcL.setStroke(Color.BLUE);
		    gcL.setFill(Color.BLUE);
		    gcL.fillRect(10,34+i*25,20,20);
		    gcL.strokeRect(10,34+i*25,20,20);
		    break;
		}
		else if (c1[i] != ' ' && c2[i] == ' ')  {
		    c1[i]=' ';
		    gcL.setStroke(Color.BLUE);
		    gcL.setFill(Color.WHITE);
		    gcL.fillRect(10,34+i*25,20,20);
		    gcL.strokeRect(10,34+i*25,20,20);
		    break;
		}
	    }
	    if (x >= 35 && x <= 55 && y >= 34+i*25 && y <= 54+i*25) {
		if (c1[i] == ' ' && c2[i] == ' ')  {
		    c2[i] = 'X';
		    gcL.setStroke(Color.ORANGE);
		    gcL.setFill(Color.ORANGE);
		    gcL.fillRect(35,34+i*25,20,20);
		    gcL.strokeRect(35,34+i*25,20,20);
		    break;
		}
		else if (c1[i] == ' ' && c2[i] != ' ')  {
		    c2[i]=' ';
		    gcL.setStroke(Color.ORANGE);
		    gcL.setFill(Color.WHITE);
		    gcL.fillRect(35,34+i*25,20,20);
		    gcL.strokeRect(35,34+i*25,20,20);
		    break;
		}
	    }
	}
	if (x >= 10 && x <= 92 && y >= 38+clinf.getClusterSize()*25 && y <= 58+clinf.getClusterSize()*25)  {
	    for (int i = 0 ; i < clinf.getClusterSize() ; ++i)  {
		if (c1[i] != ' ')  {
		    c1[i] = ' ';
		    gcL.setStroke(Color.BLUE);
		    gcL.setFill(Color.WHITE);
		    gcL.fillRect(10,34+i*25,20,20);
		    gcL.strokeRect(10,34+i*25,20,20);
		}
                if (c2[i] != ' ')  {
		    c2[i] = ' ';
		    gcL.setStroke(Color.ORANGE);
		    gcL.setFill(Color.WHITE);
		    gcL.fillRect(35,34+i*25,20,20);
		    gcL.strokeRect(35,34+i*25,20,20);
		}
	    }
	}
	if (x >= 10 && x <= 92 && y >= 63+clinf.getClusterSize()*25 && y <= 83+clinf.getClusterSize()*25)  {
	    for (int i = 0 ; i < clinf.getClusterSize() ; ++i)  {
		if (c1[i] == ' ')  {
		    c1[i] = 'X';
		    gcL.setStroke(Color.BLUE);
		    gcL.setFill(Color.BLUE);
		    gcL.fillRect(10,34+i*25,20,20);
		    gcL.strokeRect(10,34+i*25,20,20);
		}
		if (c2[i] != ' ')  {
		    c2[i] = ' ';
		    gcL.setStroke(Color.ORANGE);
		    gcL.setFill(Color.WHITE);
		    gcL.fillRect(35,34+i*25,20,20);
		    gcL.strokeRect(35,34+i*25,20,20);
		}
	    }
	}
    }
}

