//2017年5月26日
Cのシステム関数のようなもの

http://d.hatena.ne.jp/takami_hiroki/20101221/p1

import java.io.IOException;
public class Sample {
    public static void main(String[] args) {
	try {
	    Runtime rt = Runtime.getRuntime();
	    rt.exec("ls -al");
	} catch (IOException ex) {
	    ex.printStackTrace();
	}
    }
}

出力が見えない

Processを使用？

---------------------------------------------------------------
http://www.whitemark.co.jp/tec/java/javaExamples9.html
のSampleを実行するとstdoutに出力される

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;

public class RuntimeSample {
    
    private InputStream in = null;   
    
    private InputStream ein = null;
    
    private OutputStream out = null;
    
    private BufferedReader br = null;
    
    private BufferedReader ebr = null;
    
    private Process process = null;
    
    private String line = null;
    
    private String errLine = null;
    
    private Thread stdRun  = null;
    
    private Thread errRun  = null;    
    

    public RuntimeSample() {
    }
    
    private void execCmd() throws IOException, InterruptedException{ 
	
	String[] cmd = {"java","-version"};
	
	process = Runtime.getRuntime().exec(cmd);
	
	/* 1 サブプロセスの入力ストリームを取得 */
	in = process.getInputStream(); 
	
	/* 2 サブプロセスのエラーストリームを取得 */
	ein = process.getErrorStream();
	
	/* 3 サブプロセスの出力ストリームを取得 ここでは使用しません。*/
	out = process.getOutputStream();
	
	/* 上記の3つのストリームは finally でクローズします。 */
	
	try {
	    /*上記 1 のストリームを別スレッドで出力します。*/
	    Runnable inputStreamThread = new Runnable(){
		    public void run(){
			try {
			    System.out.println("Thread stdRun start");
			    br = 
				new BufferedReader(new InputStreamReader(in));
			    while ((line = br.readLine()) != null) {
				System.out.println(line);
			    }
			    System.out.println("Thread stdRun end");
			} catch (Exception e) {
			    e.printStackTrace();      
			}
		    }
		};
	    
	    /*上記 2 のストリームを別スレッドで出力*/
	    Runnable errStreamThread = new Runnable(){
		    public void run(){
			try {
			    System.out.println("Thread errRun start");
			    ebr =
				new BufferedReader(new InputStreamReader(ein));
			    while ((errLine = ebr.readLine()) != null) {
				System.err.println(errLine);
			    }          
			    System.out.println("Thread errRun end");
			} catch (Exception e) {
			    e.printStackTrace();      
			}          
		    }
		};
	    
	    stdRun = new Thread(inputStreamThread);
	    errRun = new Thread(errStreamThread);
	    
	    /* スレッドを開始します。 */
	    stdRun.start();        
	    errRun.start();
	    
	    /*プロセスが終了していなければ終了するまで待機*/
	    int c = process.waitFor();
	    
	    /* サブスレッドが終了するのを待機 */
	    stdRun.join();
	    errRun.join();
	    
	    /*プロセス終了コード出力 */
	    System.out.println(c);
	    
	} catch (Exception e) {
	    e.printStackTrace();
	}    
	finally{
	    if(br!=null)br.close();
	    if(ebr!=null)ebr.close();
	    
	    /* 子プロセス */
	    if(in!=null)in.close();
	    if(ein!=null)ein.close();
	    if(out!=null)out.close();
	}
    }

    public static void main(String[] args) {
	 
	RuntimeSample SampleRunTime = new RuntimeSample();
	try {
	    SampleRunTime.execCmd();
	} catch (Exception e) {
	    e.printStackTrace();
	}
    }
}


---------------------------------------------------------------------

http://qiita.com/tasuku/items/c359c9720810f9f1c6a1

Runtime.execはリダイレクトの入ったコマンドを実行してくれないらしい。
なぜか知ってる人コメントほしいっす :sweat_smile:
そのため、shやcmdをコマンドを用いて実行する。


        String[] Command = {
                "sh",
                "-c",
                "grep http://hogehoge.com hogehoge.log >grep.txt"
        };

        // Windowsの場合はcmd /cをたたきます
        if( SystemUtils.IS_OS_WINDOWS ) {
            Command[0] = "cmd";
            Command[1] = "/c";
        }

        Process p = Runtime.getRuntime().exec(Command);
        p.waitFor();

---------------------------------------------------------------

import java.io.IOException;
import java.io.InputStream;

public class Sample2 {
    public static void main(String[] args) {
	try  {
	    String[] Command = {
		"sh",
		"-c",
                "grep test test.dat > test2.dat"
	    };

	    Process p = Runtime.getRuntime().exec(Command);
	    p.waitFor();
	}
        catch (IOException ex) {
	    ex.printStackTrace();
	}
    }
}




javac Sample2.java
Sample2.java:14: エラー: 例外InterruptedExceptionは報告されません。スローするには、捕捉または宣言する必要があります
		     p.waitFor();
		                  ^
エラー1個

import java.io.IOException;
import java.io.InputStream;

public class Sample2 {
    public static void main(String[] args) {
	try  {
	    String[] Command = {
		"sh",
		"-c",
                "grep test test.dat > test2.dat"
	    };

	    Process p = Runtime.getRuntime().exec(Command);
	    try {
		p.waitFor();
	    }
	    catch (InterruptedException e)  {
		e.printStackTrace();
	    }
	}
        catch (IOException ex) {
	    ex.printStackTrace();
	}
    }
}

これで実行可能になった。
test2.datも生成されている。
これをベースにViewerを書き直す。

-----------------------------------------------------------------
import java.awt.Desktop;
import java.awt.EventQueue;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.io.IOException;
import java.util.logging.Logger;
import javafx.application.Application;
import javafx.event.ActionEvent;
import javafx.scene.Scene;
import javafx.scene.control.Menu;
import javafx.scene.control.MenuBar;
import javafx.scene.control.MenuItem;
import javafx.scene.layout.VBox;;
import javafx.stage.Stage;
import javafx.stage.FileChooser;

public class Viewer extends Application  {

  private final Desktop desktop = Desktop.getDesktop(); 

  @Override
  public void start(Stage stage) throws Exception {
      stage.setTitle("Viewer");
      stage.setWidth(1120);
      stage.setHeight(880);

      final FileChooser fileChooser = new FileChooser();
      VBox root = new VBox();
      
      MenuBar menuBar = new MenuBar();
      Menu fileMenu = new Menu("File");

      MenuItem mnuImSequFS = new MenuItem("Import Seq File (unaligned FASTA)");
      MenuItem mnuImSeqaFS = new MenuItem("Import Seq File (aligned FASTA)");
      MenuItem mnuImSeqCl = new MenuItem("Import Seq File (Clustal)");
      MenuItem mnuImTree = new MenuItem("Import Tree File");
      MenuItem mnuImClus = new MenuItem("Import Cluster File");
      MenuItem mnuExit = new MenuItem("Exit");
      mnuImSeqaFS.setOnAction(event -> {
	      File file = fileChooser.showOpenDialog(stage);
	      if (file != null)  {
		  String filename = file.getName();
		  importFasta ifseq = new importFasta(filename);
	      } 
	  });

      mnuImSequFS.setOnAction(event -> {
	      File file = fileChooser.showOpenDialog(stage);
	      String mft = new String("sh -c mafft --auto ");
	      if (file != null)  {
		  String filename = file.getName();
		  mft = mft.concat(filename);
		  mft = mft.concat(" > dummy.txt");
		  System.out.println(mft);
		  try {
		      Runtime rt = Runtime.getRuntime();
		      Process p = rt.exec(mft);
		      try  {
			  p.waitFor();
		      }
		      catch (InterruptedException e) {
			  e.printStackTrace();
		      }
		  } catch (IOException ex) {
		      ex.printStackTrace();
		  }
	      } 
	  });

      mnuExit.setOnAction(event -> System.exit(0));

      fileMenu.getItems().addAll(mnuImSequFS, mnuImSeqaFS, mnuImSeqCl, mnuImTree, mnuImClus, mnuExit);
      menuBar.getMenus().addAll(fileMenu);
      
      root.getChildren().addAll(menuBar);
     
      stage.setScene(new Scene(root));
      stage.show();
  }

  private void openFile(File file)  {
      EventQueue.invokeLater(() -> { 
	      try {
		  desktop.open(file);
              }
	      catch (IOException ex)  {
		  Logger.getLogger(Viewer.class.getName()).log(Level.SEVERE, null, ex);
	      }
	  });
  }
}

----------------------------------------------------------------------------

やはりファイルが作成されない
sh -c が駄目っぽい
コマンドで実行すると
sh -c mafft --auto test.dat > dummy.txt

/usr/local/bin/mafftdir/bin/mafft: Cannot open .
------------------------------------------------------------------------------
  MAFFT v7.130b (2013/12/05)
  http://mafft.cbrc.jp/alignment/software/
  MBE 30:772-780 (2013), NAR 30:3059-3066 (2002)
------------------------------------------------------------------------------
High speed:
  % mafft in > out
  % mafft --retree 1 in > out (fast)

High accuracy (for <~200 sequences x <~2,000 aa/nt):
  % mafft --maxiterate 1000 --localpair  in > out (% linsi in > out is also ok)
  % mafft --maxiterate 1000 --genafpair  in > out (% einsi in > out)
  % mafft --maxiterate 1000 --globalpair in > out (% ginsi in > out)

If unsure which option to use:
  % mafft --auto in > out

--op # :         Gap opening penalty, default: 1.53
--ep # :         Offset (works like gap extension penalty), default: 0.0
--maxiterate # : Maximum number of iterative refinement, default: 0
--clustalout :   Output: clustal format, default: fasta
--reorder :      Outorder: aligned, default: input order
--quiet :        Do not report progress
--thread # :     Number of threads (if unsure, --thread -1)

となって計算されない

----------------------------------------------------------------------------

ProcessBuilderでやってみる
http://n-agetsuma.hatenablog.com/entry/2014/02/12/215321

まず、このサイトのサンプルプログラムを実行してみる。

import java.io.IOException;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.lang.Process;
import java.lang.ProcessBuilder;

class Sample3 {

    public static void main(String[] args)  {
	ProcessBuilder pb = new ProcessBuilder("ping", "-c", "3", "127.0.0.1");

	try {
	    Process p = pb.start();
	    // ping が完了するのを待つ
	    p.waitFor();

	    // 実行結果を取得するストリームの種別を出力
	    System.out.println(pb.redirectInput());

	    try (BufferedReader br = new BufferedReader(new InputStreamReader(p.getInputStream()))) {
		    // ping結果の出力
		    for(String line = br.readLine(); line != null; line = br.readLine()) {
			System.out.println(line);
		    }
		}
	} catch (IOException | InterruptedException e) {
	    // 例外ハンドリング処理
	}
    }
}


javac Sample3.java
rid92-9:Runtime260517 TOHi$ java Sample3
PIPE
PING 127.0.0.1 (127.0.0.1): 56 data bytes
64 bytes from 127.0.0.1: icmp_seq=0 ttl=64 time=0.055 ms
64 bytes from 127.0.0.1: icmp_seq=1 ttl=64 time=0.176 ms
64 bytes from 127.0.0.1: icmp_seq=2 ttl=64 time=0.120 ms

--- 127.0.0.1 ping statistics ---
3 packets transmitted, 3 packets received, 0.0% packet loss
round-trip min/avg/max/stddev = 0.055/0.117/0.176/0.049 ms

stdioに出力された
これをベースに同サイトのリダイレクションによるファイル出力を試す

