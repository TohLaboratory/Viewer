import java.io.File;
import java.io.IOException;
import java.util.ArrayList;

import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
//import com.fasterxml.jackson.databind.JsonNode;
//import com.fasterxml.jackson.databind.ObjectMapper;

public class Main4 {
    static ArrayList<String> uniprotId = new ArrayList<String>();
    static ArrayList<String> academicName = new ArrayList<String>();
    static ArrayList<String> commonName = new ArrayList<String>();
    static ArrayList<ArrayList<String>> molecularFunction = new ArrayList<ArrayList<String>>();
    static ArrayList<ArrayList<String>> cellularComponent = new ArrayList<ArrayList<String>>();
    static ArrayList<ArrayList<String>> biologicalProcess = new ArrayList<ArrayList<String>>();
    static ArrayList<ArrayList<String>> mFGO = new ArrayList<ArrayList<String>>();
    static ArrayList<ArrayList<String>> cCGO = new ArrayList<ArrayList<String>>();
    static ArrayList<ArrayList<String>> bPGO = new ArrayList<ArrayList<String>>();
    static ArrayList<String> mFunction = new ArrayList<String>();
    static ArrayList<String> cComponent = new ArrayList<String>();
    static ArrayList<String> bProcess = new ArrayList<String>();
    static ArrayList<String> mGO = new ArrayList<String>();
    static ArrayList<String> cGO = new ArrayList<String>();
    static ArrayList<String> bGO = new ArrayList<String>();
    static String label;
    static String GOId;
    static int check = 0;
    static int check2 = 0;

    public static void main(String[] args) {
        try {
	    // JsonFactoryの生成
	    JsonFactory factory = new JsonFactory();
	    // JsonParserの取得
	    //	    JsonParser parser = factory.createJsonParser(new File("sample3.json"));
	    JsonParser parser = factory.createParser(new File("outv2.json"));
      
	    // 配列の処理
	    if (parser.nextToken() == JsonToken.START_ARRAY) {
		while (parser.nextToken() != JsonToken.END_ARRAY) {
		    // 各オブジェクトの処理
		    if (parser.getCurrentToken() == JsonToken.START_OBJECT) {
			while (parser.nextToken() != JsonToken.END_OBJECT) {
			    if (parser.getCurrentToken() == JsonToken.FIELD_NAME && "input".equals(parser.getText())) {
				    if (check2 != 0)   {
					molecularFunction.add(mFunction);
					cellularComponent.add(cComponent);
					biologicalProcess.add(bProcess);
					mFGO.add(mGO);
					cCGO.add(cGO);
					bPGO.add(bGO);
				    }
				    check = 0;
				    mFunction = new ArrayList<String>();
				    cComponent = new ArrayList<String>();
				    bProcess = new ArrayList<String>();
				    mGO = new ArrayList<String>();
				    cGO = new ArrayList<String>();
				    bGO = new ArrayList<String>();
				    check2++;
				    parser.nextToken();
				    if (parser.getCurrentToken() == JsonToken.START_OBJECT) {
					while(parser.nextToken() != JsonToken.END_OBJECT) {
					    if (parser.getCurrentToken() == JsonToken.FIELD_NAME && "id".equals(parser.getText())) {
						parser.nextToken();
						String name = parser.getText();
						String[]  name2 = name.split("/");
						uniprotId.add(name2[name2.length-1]);
					    }
					}
				    }
			    }
			    else if (parser.getCurrentToken() == JsonToken.FIELD_NAME && "output".equals(parser.getText())) {
				parser.nextToken();
				if (parser.getCurrentToken() == JsonToken.START_ARRAY) {
				    while(parser.nextToken() != JsonToken.END_ARRAY)  {
					if (parser.getCurrentToken() ==JsonToken.START_OBJECT)  {
					    while(parser.nextToken() != JsonToken.END_OBJECT) {
						if (parser.getCurrentToken() == JsonToken.FIELD_NAME  &&  "idclass".equals(parser.getText()))  {
						    parser.nextToken();
						    String name = parser.getText();
						    String[] name2 = name.split("/");
						    if ("Taxon".equals(name2[name2.length-1]))  check = 1;
						    else if ("Concept".equals(name2[name2.length-1]))  check = 2;
						}
						else if (parser.getCurrentToken() == JsonToken.FIELD_NAME  &&  "result".equals(parser.getText()))  {
							parser.nextToken();
							if (parser.getCurrentToken() == JsonToken.START_ARRAY)  {
							    while(parser.nextToken() != JsonToken.END_ARRAY)  {
								if (parser.getCurrentToken() == JsonToken.START_OBJECT)  {
								    while(parser.nextToken() != JsonToken.END_OBJECT) {
									if (parser.getCurrentToken() == JsonToken.FIELD_NAME && "label".equals(parser.getText()))  {
									    parser.nextToken();
									    if (check == 1)  {
										//										System.out.println("academic name : " + parser.getText());
										academicName.add(parser.getText());
									    }
									    else if (check == 2) {
										label = parser.getText(); 
										//										System.out.println("   label = " + label);
									    }
									}
									else if (parser.getCurrentToken() == JsonToken.FIELD_NAME && "id".equals(parser.getText()))  {
									    parser.nextToken();
									    if (check == 2)  {
										String id1 = parser.getText();
										String[] id2 = id1.split("/");
										String GOId = id2[id2.length-1];
										//										System.out.println("    id = " + id);
									    }
									}
									else if (parser.getCurrentToken() == JsonToken.FIELD_NAME && "info".equals(parser.getText()))  {
									    parser.nextToken();
									    if (check == 1)  {
										//										System.out.println("common name : " + parser.getText());
										commonName.add(parser.getText());
									    }
									    else if (check == 2)  {
										String info = parser.getText();
                    								  //										System.out.println("    info = " + info);
										if ("null".equals(info))  continue;
										else {
										    if ("molecular_function".equals(info))  {
											mFunction.add(label);
											mGO.add(GOId);
										    }
										    else if ("cellular_component".equals(info)) {
											cComponent.add(label);
											cGO.add(GOId);
										    }
										    else if ("biological_process".equals(info)) {
											bProcess.add(label);
											bGO.add(GOId);
										    }
										}
									    }
									}
								    }
								}
							    }
							}
						}					        
						else {
						    parser.skipChildren();
						}
					    }   
					}
				    } 
				}
			    }
			    else  { 
				parser.skipChildren();
			    }
		         }
		      }
		}

		//	    else {
		//		parser.skipChildren();
		//          }
	    }
	}  catch (IOException e) {
            e.printStackTrace();
        }

	molecularFunction.add(mFunction);
	cellularComponent.add(cComponent);
	biologicalProcess.add(bProcess);
	mFGO.add(mGO);
	cCGO.add(cGO);
	bPGO.add(bGO);
 
        System.out.println(uniprotId.size());
	System.out.println(academicName.size()); 
	System.out.println(commonName.size());
	System.out.println(molecularFunction.size());
	System.out.println(cellularComponent.size());
	System.out.println(biologicalProcess.size());

	for (int i = 0 ; i < uniprotId.size() ; ++i)  {
	    System.out.println(uniprotId.get(i));
	    System.out.println("    " + academicName.get(i));
	    System.out.println("    " + commonName.get(i));
	    System.out.print("    ");
	    for (int j = 0 ; j < molecularFunction.get(i).size() ; ++j) {
		System.out.print(molecularFunction.get(i).get(j) + " ; ");
	    }
	    System.out.print("    ");
	    for (int j = 0 ; j < molecularFunction.get(i).size() ; ++j) {
		System.out.print(mFGO.get(i).get(j) + " ; ");
	    }	    
	    System.out.print("    ");
	    for (int j = 0 ; j < cellularComponent.get(i).size() ; ++j) {
		System.out.print(cellularComponent.get(i).get(j) + " ; ");
	    }
	    System.out.print("    ");
	    for (int j = 0 ; j < cellularComponent.get(i).size() ; ++j) {
		System.out.print(cCGO.get(i).get(j) + " ; ");
	    }
	    System.out.print("    ");
	    for (int j = 0 ; j < biologicalProcess.get(i).size() ; ++j) {
		System.out.print(biologicalProcess.get(i).get(j) + " ; ");
	    }
	    System.out.print("    ");
	    for (int j = 0 ; j < biologicalProcess.get(i).size() ; ++j) {
		System.out.print(bPGO.get(i).get(j) + " ; ");
	    }
	    System.out.println("");
	    System.out.println("//");
	}
    
    }
    
}
